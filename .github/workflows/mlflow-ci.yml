name: CI/CD MLflow to DockerHub

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DATA_PATH: "./df_soil_preprocessed.csv"
  DOCKER_IMAGE_NAME: "soil-classification-model"
  MLFLOW_PORT: 5000
  DOCKER_PORT: 8080

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "mlflow==2.19.0" scikit-learn pandas docker
          pip list

      - name: üèóÔ∏è Ensure Experiment Exists
        run: |
          mlflow server --host 0.0.0.0 --port 5000 &
          sleep 5
          mlflow experiments create --experiment-name "Soil_Classification_CI" || true
          mlflow experiments search

      - name: üöÄ Run MLflow Project
        run: |
          mlflow run ./MLProject \
            --env-manager=local \
            -P data_file=${{ env.DATA_PATH }} \
            --experiment-name="Soil_Classification_CI"

      - name: üîç Get Run ID
        id: get_run_id
        run: |
          EXPERIMENT_ID=$(mlflow experiments search | grep "Soil_Classification_CI" | awk '{print $1}')
          if [ -z "$EXPERIMENT_ID" ]; then
            echo "::error::Experiment 'Soil_Classification_CI' not found"
            exit 1
          fi
          echo "Experiment ID: $EXPERIMENT_ID"
          echo "Available runs:"
          mlflow runs list --experiment-id $EXPERIMENT_ID
          RUN_ID=$(mlflow runs list --experiment-id $EXPERIMENT_ID | awk 'NR==2 {print $1}' | grep -v '^ID$')
          if [ -z "$RUN_ID" ]; then
            echo "::error::No MLflow runs found in experiment $EXPERIMENT_ID"
            exit 1
          fi
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Model Run ID: $RUN_ID"

      - name: üê≥ Build Docker Image
        run: |
          mlflow models build-docker \
            -m "runs:/${{ env.RUN_ID }}/model" \
            -n "${{ env.DOCKER_IMAGE_NAME }}" \
            --enable-mlserver

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: üè∑Ô∏è Tag and Push
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: üß™ Test Docker Image
        run: |
          docker run -d -p ${{ env.MLFLOW_PORT }}:${{ env.DOCKER_PORT }} --name test-container ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          sleep 10
          curl -X POST http://localhost:${{ env.MLFLOW_PORT }}/invocations \
            -H 'Content-Type: application/json' \
            -d '{"inputs": [[7.4, 0.7, 0.0, 1.9, 0.076, 11.0, 34.0]]}'
          docker stop test-container
          docker rm test-container
