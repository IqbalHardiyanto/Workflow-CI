name: CI/CD MLflow to DockerHub

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DATA_PATH: "./df_soil_preprocessed.csv"
  DOCKER_IMAGE_NAME: "soil-classification-model"
  MLFLOW_PORT: 5000
  DOCKER_PORT: 8080

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1. Setup Environment
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "mlflow==2.19.0" scikit-learn pandas docker
          echo "Installed packages:"
          pip list

      - name: 🏗️ Ensure Experiment Exists
        run: |
          mlflow experiments create --experiment-name "Soil_Classification_CI" || true

      # 2. Run MLflow Training
      - name: 🚀 Run MLflow Project
        run: |
          mlflow run ./MLProject \
            --env-manager=local \
            -P data_file=${{ env.DATA_PATH }} \
            --experiment-name="Soil_Classification_CI"

      # 3. Extract Run Information (FIXED)
      - name: 🔍 Get Run ID
        id: get_run_id
        run: |
          EXPERIMENT_ID=$(mlflow experiments search | awk -F' ' '$3=="Soil_Classification_CI"{print $1}')
          if [ -z "$EXPERIMENT_ID" ]; then
            echo "::error::Experiment not found"
            exit 1
          fi
          RUN_ID=$(mlflow runs list --experiment-id "$EXPERIMENT_ID" | awk 'NR==2 {print $1}')
          if [ -z "$RUN_ID" ]; then
            echo "::error::No MLflow runs found"
            exit 1
          fi
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Model Run ID: $RUN_ID"
          echo "Artifact URI:"
          mlflow artifacts list --run-id $RUN_ID

      # 4. Build Docker Image
      - name: 🐳 Build Docker Image
        run: |
          mlflow models build-docker \
            -m "runs:/${{ env.RUN_ID }}/model" \
            -n "${{ env.DOCKER_IMAGE_NAME }}" \
            --enable-mlserver \
            --install-mlflow

      # 5. Docker Hub Integration
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 🏷️ Tag and Push
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      # 6. Verification and Cleanup
      - name: 🧪 Test Docker Image
        run: |
          docker run -d -p ${{ env.MLFLOW_PORT }}:${{ env.DOCKER_PORT }} --name test-container ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          sleep 10  # Wait for server to start
          curl -X POST http://localhost:${{ env.MLFLOW_PORT }}/invocations \
            -H 'Content-Type: application/json' \
            -d '{"inputs": [[7.4, 0.7, 0.0, 1.9, 0.076, 11.0, 34.0]]}'
          docker stop test-container
          docker rm test-container

      - name: 📊 Save Run Info
        run: |
          echo "MLflow Run ID: ${{ env.RUN_ID }}" >> run_info.md
          echo "Docker Image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}" >> run_info.md
          echo "Git SHA: ${{ github.sha }}" >> run_info.md
          cat run_info.md

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: |
            run_info.md
            MLProject/mlruns/0/${{ env.RUN_ID }}/artifacts/model
          retention-days: 7
